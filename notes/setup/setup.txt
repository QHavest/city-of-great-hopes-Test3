if setup == false
{
	setup = true;
	//cam_x =0;
	#region (if room_high...)
/*
	if room_height >=300 
	{	
//		line_hight = 12;
//		line_sep	= 3;// відстань між строками 
	//	border      = 4// відступи від краю
		offsett_kof = 1;
		scale = 0.08;
		draw_set_font(for_large);
		font_for_math = for_large;
	}
	if room_height <300 && room_height>=150
	{
//		border    = 3;
//		line_hight = 6;
//		line_sep  = 2;
		offsett_kof = 0.4;
		scale = 0.05;
		draw_set_font(for_normal);
		font_for_math = for_normal;
	}
	if room_height <150
	{
//		border     = 2;
//		line_hight = 4
//		line_sep   = 2;
		offsett_kof = 0.4;
		scale = 0.04;
		draw_set_font(for_small);
		font_for_math = for_small;
	}
//	*/
	#endregion

	draw_set_valign(fa_top);
	draw_set_halign(fa_left);

	//  розрахунку положеня та інш
	text_width = gui_W/2 //+ 2*border;
	txtb_width = text_width + border*2
	textbox_y = cam_y + border;
	txt_y = textbox_y + border;		
	midle_x = cam_x + gui_W/2
	txtb_x = midle_x - border - text_width/2
	hi_txtb = (line_hight+line_sep)*4 + border*2 - line_sep;
	ico_scale = (hi_txtb-border*2)/sprite_get_height(spr_ic_Ytopurok);
	icobx1 = txtb_x - (20*ico_scale)-ic_b*2;
	icobx2 = txtb_x + txtb_width;
	
	//цикл для "листання" сторінок,
for(var p=0; p<page_number; p++)
	{
		//визначення кількості символів на сторіні
		text_length[p] = string_length(text[p]);
		
		for(var c=0; c<text_length[p]; c++)
			{
			var _char_pos=c+1;
			
			//збереження кожної букви в індивідуальному масиві "char"
			char[c,p] = string_char_at(text[p],_char_pos) ;
			
			//визначення ширини лінії тесту
			var txt_up_to_char = string_copy(text[p],1,_char_pos);
			var _current_txt_w = (string_width(txt_up_to_char) - string_width(char[c,p]))*scale;
			
			// визначення залишеного вільного місця
			if char [c,p] ==" " and c>0
			{ 
				if char [c-1,p] == " " line_break_offset[p] = -999
				else last_free_space = _char_pos+1;
			}
								
			// розділення тексту на рядки
			if _current_txt_w - line_break_offset[p] > text_width
				{
				line_break_pos[ line_break_num[p], p] = last_free_space;
				//line_widt[line_break_num[p]] = _current_txt_w - line_break_offset[p];
				line_break_num[p]++;
				var _txt_up_to_last_space = string_copy( text[p], 1, last_free_space);
				var _last_free_space_string = string_char_at(text[p],last_free_space);
				line_break_offset[p] = (string_width(_txt_up_to_last_space) - string_width(_last_free_space_string))*scale;		
			//	line_widt[line_break_num[p]-1] =string_width(_txt_up_to_last_space) ;
				}		
			}
			// цикл для вирівнювання 
			var _txt_line = 0;
			var _str_copy = string_copy(text[p],1, line_break_pos[0,p]-2);
			line_widt[0] = string_width(_str_copy)*scale;
			
			for (var lb=1; lb<line_break_num[p]; lb++)
				{		
					_str_copy = string_copy(text[p],line_break_pos[lb-1,p], line_break_pos[lb,p] - line_break_pos[lb-1,p]);
					line_widt[lb] = string_width(_str_copy)*scale;
				}
			
			_str_copy = string_copy(text[p],line_break_pos[lb-1,p], string_width(text[p])*scale - line_break_pos[lb-1,p]-2);
			line_widt[lb] = string_width(_str_copy)*scale;
			
			var first_y = (hi_txtb + line_sep - (line_hight+line_sep)*(line_break_num[p] + 1) )/2 ;
			
		// визначення координат кожного символу
		 for (var c=0; c<text_length[p]; c++)
			{
			 _char_pos = c+1;

			//визначення ширини лінії тесту
			txt_up_to_char = string_copy(text[p],1,_char_pos);
			_current_txt_w = string_width(txt_up_to_char) - string_width(char[c,p]);
			_txt_line = 0;
			// розділення на лінії
				for (var lb=0; lb<line_break_num[p]; lb++)
				{
				if _char_pos >=line_break_pos[lb, p]
					{
					var _str_copy = string_copy(text[p], line_break_pos[lb,p], _char_pos-line_break_pos[lb,p]);
					//line_widt[lb+1] = _current_txt_w;
					_current_txt_w = string_width(_str_copy);
					//line_y[_txt_line][p] = first_y + _txt_line*(line_hight+line_sep);
					_txt_line = lb + 1;
					}
				}
				
			// додамо координати
			char_x [c, p] = midle_x + _current_txt_w*scale - line_widt[_txt_line]/2;
			char_y [c, p] = textbox_y + first_y + _txt_line*(line_hight+line_sep);
			
		}
	}	
}